/*
Repeating Key XOR Encryption Method:
The repeatingKeyXOREncrypt method takes the plaintext and the key as input parameters and returns the ciphertext.
It initializes a StringBuilder to store the ciphertext.
It repeats the key cyclically to match the length of the plaintext. This is done by appending characters of the key to a StringBuilder.
It performs the XOR operation between each byte of the plaintext and the corresponding byte of the repeated key.
The result of the XOR operation is converted to hexadecimal representation and appended to the ciphertext StringBuilder.
Finally, it returns the ciphertext as a string.
*/
public class Crypto_problem_RepeatingKeyXOREncryption {
    public static void myDetails(){
        System.out.println("*************************************************************************");
        System.out.println("         NAME    : MONISHA S");
        System.out.println("         REG.NO  : 21BCT0414");
        System.out.println("         AIM     : Implementation of the RepeatingKeyXOREncryption");
        System.out.println("         DATE    : 02/08/2024");
        System.out.println("*************************************************************************\n");
    } 
    public static void main(String[] args) {
        
        //myDetails 
        
        myDetails();
        // Given plaintext
        String plaintext = "Burning 'em, if you ain't quick and nimble\nI go crazy when I hear a cymbal";
        // Given key
        String key = "ICE";
        System.out.println("Given PlainText\n"+plaintext+"\nGiven Key : "+key+"\n");
        // Encrypt the plaintext using repeating-key XOR
        String ciphertext = repeatingKeyXOREncrypt(plaintext, key);
        
        // Print the ciphertext
        System.out.println("Ciphertext\n");
        System.out.println(ciphertext);
    }

    public static String repeatingKeyXOREncrypt(String plaintext, String key) {
        StringBuilder ciphertext = new StringBuilder();
        int keyIndex = 0; // Index to keep track of the current byte of the key
        
        // Iterate over each byte of the plaintext
        for (int i = 0; i < plaintext.length(); i++) {
            char plainChar = plaintext.charAt(i); // Get the current character of the plaintext
            char keyChar = key.charAt(keyIndex); // Get the current character of the key
            
            // XOR the current byte of plaintext with the current byte of the key
            char encryptedChar = (char) (plainChar ^ keyChar);
            // Append the encrypted byte to the ciphertext
            ciphertext.append(String.format("%02x", (int) encryptedChar));
            
            // Move to the next byte of the key (and wrap around if necessary)
            keyIndex = (keyIndex + 1) % key.length();
        }
        
        return ciphertext.toString();
    }
}
